
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pg_net" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$begin
  insert into public.profiles (id, full_name, has_avatar, updated_at)
  values (new.id, new.raw_user_meta_data->>'full_name', false, now());
  return new;
end;
$$;

create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE "public"."grandezas" (
    "id" bigint NOT NULL,
    "nome" character varying NOT NULL,
    "unidade" character varying NOT NULL
);

ALTER TABLE "public"."grandezas" OWNER TO "postgres";

ALTER TABLE "public"."grandezas" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."grandezas_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE "public"."medidores" (
    "id" bigint NOT NULL,
    "nome" character varying NOT NULL,
    "descricao" character varying,
    "created_at" timestamp with time zone DEFAULT "now"()
);

ALTER TABLE "public"."medidores" OWNER TO "postgres";

CREATE TABLE "public"."medidores_grandezas" (
    "medidor_id" bigint NOT NULL,
    "grandeza_id" bigint NOT NULL
);

ALTER TABLE "public"."medidores_grandezas" OWNER TO "postgres";

ALTER TABLE "public"."medidores" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."medidores_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE "public"."profiles" (
    "id" "uuid" NOT NULL,
    "full_name" "text",
    "updated_at" timestamp without time zone DEFAULT "now"() NOT NULL,
    "has_avatar" boolean DEFAULT false NOT NULL
);

ALTER TABLE "public"."profiles" OWNER TO "postgres";

CREATE TABLE "public"."test" (
    "id" bigint NOT NULL,
    "text" character varying,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "user_id" "uuid" NOT NULL
);

ALTER TABLE "public"."test" OWNER TO "postgres";

ALTER TABLE "public"."test" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."test_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."grandezas"
    ADD CONSTRAINT "grandezas_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."medidores_grandezas"
    ADD CONSTRAINT "medidores_grandezas_pkey" PRIMARY KEY ("medidor_id", "grandeza_id");

ALTER TABLE ONLY "public"."medidores"
    ADD CONSTRAINT "medidores_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."test"
    ADD CONSTRAINT "test_pkey" PRIMARY KEY ("id");

CREATE TRIGGER "atualiza profile picture" AFTER INSERT ON "public"."profiles" FOR EACH ROW EXECUTE FUNCTION "supabase_functions"."http_request"('https://pgvayrhynrwncrfygwxu.functions.supabase.co/profile-picture', 'POST', '{"Content-type":"application/json","Authorization":"Bearer JWT_SERVICE_KEY"}', '{}', '1000');

ALTER TABLE ONLY "public"."medidores_grandezas"
    ADD CONSTRAINT "medidores_grandezas_grandeza_id_fkey" FOREIGN KEY ("grandeza_id") REFERENCES "public"."grandezas"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."medidores_grandezas"
    ADD CONSTRAINT "medidores_grandezas_medidor_id_fkey" FOREIGN KEY ("medidor_id") REFERENCES "public"."medidores"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."test"
    ADD CONSTRAINT "test_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

CREATE POLICY "Enable delete for users based on user_id" ON "public"."test" FOR DELETE USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Only user can update own profile" ON "public"."profiles" FOR UPDATE USING (true) WITH CHECK (("auth"."uid"() = "id"));

CREATE POLICY "Public profiles are viewable by everyone." ON "public"."profiles" FOR SELECT USING (true);

CREATE POLICY "Users can insert their own profile." ON "public"."profiles" FOR INSERT WITH CHECK (("auth"."uid"() = "id"));

ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "só mostra o seu" ON "public"."test" FOR SELECT USING (("auth"."uid"() = "user_id"));

CREATE POLICY "só pode inserir com seu id" ON "public"."test" FOR INSERT WITH CHECK (("auth"."uid"() = "user_id"));

ALTER TABLE "public"."test" ENABLE ROW LEVEL SECURITY;

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";

GRANT ALL ON TABLE "public"."grandezas" TO "anon";
GRANT ALL ON TABLE "public"."grandezas" TO "authenticated";
GRANT ALL ON TABLE "public"."grandezas" TO "service_role";

GRANT ALL ON SEQUENCE "public"."grandezas_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."grandezas_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."grandezas_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."medidores" TO "anon";
GRANT ALL ON TABLE "public"."medidores" TO "authenticated";
GRANT ALL ON TABLE "public"."medidores" TO "service_role";

GRANT ALL ON TABLE "public"."medidores_grandezas" TO "anon";
GRANT ALL ON TABLE "public"."medidores_grandezas" TO "authenticated";
GRANT ALL ON TABLE "public"."medidores_grandezas" TO "service_role";

GRANT ALL ON SEQUENCE "public"."medidores_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."medidores_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."medidores_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";

GRANT ALL ON TABLE "public"."test" TO "anon";
GRANT ALL ON TABLE "public"."test" TO "authenticated";
GRANT ALL ON TABLE "public"."test" TO "service_role";

GRANT ALL ON SEQUENCE "public"."test_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."test_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."test_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
